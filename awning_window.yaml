esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: '1.0'
  includes:
    - awning_window.h
  on_boot:
    then:
      - lambda: id(boot_count) = id(boot_count) + 1;
      - output.turn_off: mode
      - output.turn_on: motor_sleep
      - output.turn_off: motor_en
      - output.turn_off: motor_dir
      
esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG
  
# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
  platform: esphome
  password: !secret ota_password
  
# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  # Set up a wifi access point
  ap: {}
  power_save_mode: none

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

globals:
  - id: boot_count
    type: int
    restore_value: true
    initial_value: '0'

number:
  # Configuration for the maximum value of the encoder to represent open
  # Closed is always encoder reset, or zero.
  - platform: template
    name: Encoder Maximum
    id: max_position
    mode: box
    entity_category: config
    disabled_by_default: False
    min_value: 0
    max_value: 100
    step: 0.125
    restore_value: true
    optimistic: true

  # This debug component allows us to specify a number of roations
  # to move the motor. Can be used for manual calibration.
  - platform: template
    name: Manual Move
    id: manual_move
    mode: box
    entity_category: config
    disabled_by_default: True
    min_value: -100
    max_value: 100
    step: 0.125
    initial_value: 0
    restore_value: false
    optimistic: true
    on_value: 
      then:
        - lambda: |-
            if (x != 0){
              id(target).publish_state(id(encoder).state+x);
              if (id(encoder).state > id(target).state){
                id(awning).current_operation = esphome::cover::COVER_OPERATION_CLOSING;
                id(awning).publish_state();
                id(motor_close).turn_on();
              } else if (id(encoder).state < id(target).state){
                id(awning).current_operation = esphome::cover::COVER_OPERATION_OPENING;
                id(awning).publish_state();
                id(motor_open).turn_on();
              }
            }

switch:
  # Configuration  
  - platform: template
    name: Quiet Mode
    disabled_by_default: false
    entity_category: config
    id: quiet_mode
    optimistic: True
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    name: Close to Endstop
    disabled_by_default: false
    entity_category: config
    id: close_to_endstop
    optimistic: True
    restore_mode: RESTORE_DEFAULT_OFF

  # Two internal switch signals provide high level open / close commands
  - platform: template
    name: "Close"
    id: motor_close
    entity_category: diagnostic
    disabled_by_default: True
    optimistic: true
    turn_on_action:
      # Allow motor driver to wake
      - output.turn_off: motor_sleep
      - delay: 2ms
      # Set the direction
      - output.turn_on: motor_dir
      - output.turn_on: motor_en
      # Simple Soft Start to prevent large inrush which will stress power supply
      - output.set_level:
          id: motor_en
          level: "90%"
      # After this the control sensor takes over...
    turn_off_action:
      - lambda: id(pwm).publish_state(0);
      - output.turn_off: motor_en
      - output.turn_on: motor_sleep
  - platform: template
    name: "Open"
    id: motor_open
    entity_category: diagnostic
    disabled_by_default: True
    optimistic: true
    turn_on_action:
      # Allow motor driver to wake
      - output.turn_off: motor_sleep
      - delay: 2ms
      # Set the direction
      - output.turn_off: motor_dir
      - output.turn_on: motor_en
      # Simple Soft Start to prevent large inrush which will stress power supply
      - output.set_level:
          id: motor_en
          level: "90%"
      # After this the control sensor takes over...
    turn_off_action:
      - lambda: id(pwm).publish_state(0);
      - output.turn_off: motor_en
      - output.turn_on: motor_sleep

button:
  # Allow boot counter to be reset by UI
  - platform: template
    id : boot_count_reset
    name: "Boot Count Reset"
    entity_category: config
    disabled_by_default: false
    on_press:
      - lambda: id(boot_count) = 0;

  # Trigger hardware reset of the rotary encoder from UI
  - platform: template
    id : encoder_reset
    name: "Encoder Reset"
    entity_category: config
    disabled_by_default: false
    on_press: 
      then:
        - output.turn_on: encoder_reset_signal
        - delay: 500ms
        - output.turn_off: encoder_reset_signal
        - lambda: id(encoder).publish_state(0);

  # Trigger hardware reset of the rotary encoder from UI
  - platform: template
    id : calibrate_closed
    name: "Calibrate Closed"
    entity_category: config
    disabled_by_default: false
    on_press: 
      then:
        - output.turn_on: encoder_reset_signal
        - delay: 500ms
        - output.turn_off: encoder_reset_signal
        - lambda: |-
            id(encoder).publish_state(0);
            id(target).publish_state(id(encoder).state);
            id(at_target).publish_state(true);
            id(awning).current_operation = esphome::cover::COVER_OPERATION_IDLE;
            id(awning).position = 0;
            id(awning).publish_state();


# Define the output pins
# Only special pin is motor_en which is PWM. Using PWM to control
# the motor was essential. Using a simple switch caused large inrush
# current and power supply issues. Need PWM and need soft-start.
output:
  - platform: gpio
    pin: GPIO18
    id: mode
  - platform: ledc
    pin: GPIO21
    id: motor_en
    frequency: 10000Hz
  - platform: gpio
    pin: GPIO19
    id: motor_dir
  - platform: gpio
    pin: GPIO4
    id: motor_sleep
    inverted: True
  - platform: gpio
    pin: GPIO27
    id: encoder_reset_signal

sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
    disabled_by_default: true
  - platform: uptime
    name: Uptime Sensor
    update_interval: 60s
    entity_category: diagnostic
    disabled_by_default: true

# Use ADC sensor with the gain of the CS, which is 2.5v per amp
# ADC needs to be on the Max range, 12dB attenuation
# The ADC is terrrible!
# Provide a zero offset, ie when motor not powered it needs to be 0
# It also needs a gain correction which I have not calibrated so the low 
# current readings are not accurate. But its really only used as a 
# redundant fault sensor, the motor controller does most of what is needed.
  - platform: adc
    pin: GPIO32
    name: "Motor Current"
    id: motor_current
    entity_category: "diagnostic"
    attenuation: 12dB
    accuracy_decimals: 3
    unit_of_measurement: A
    update_interval: 0.1s
    filters:
      - offset: -0.1420
      - multiply: 0.4
      - sliding_window_moving_average:
          window_size: 10
          send_every: 10
      - or:
          - throttle: 300s # send a periodic update every 5 minutes
          - delta: 0.010   # send an update when there is a change

  # The rotary encoder seems to produce 6400 pulses per rotation
  # Use lambda filters to convert this pulse count into rotations by
  # dividing the raw count by 6400 - need to change with different
  # motor/encoder!
  # Use resolution = 4, maybe this is hardware reducing updates?
  # This encoder is the main trigger for computation, every 1/32 of
  # a rotation it will produce an event and other copy sensors will
  # pick that up for further processing.
  - platform: rotary_encoder
    name: Encoder
    entity_category: "diagnostic"
    disabled_by_default: false
    id: encoder
    pin_a: GPIO36
    pin_b: GPIO39
    pin_reset: 
      number: GPIO26
      mode: input
    restore_mode: RESTORE_DEFAULT_ZERO
    resolution: 1
    publish_initial_value: true
    device_class: "distance"
    unit_of_measurement: "rotations"
    accuracy_decimals: 3
    filters:
      - lambda: return (float)x/6336; 
      - delta: 0.001

  # This is the main control loop!
  - platform: copy
    name: control
    id: control
    source_id: encoder
    unit_of_measurement: "rotations"
    filters:
      # x is the encoder value from id(encoder)
      # This code only runs when the motor is running and the encoder
      # is updating. It controls the speed, slowing the motor as we
      # near the target to prevent overshoot. Also detects and sets
      # the at_target binary sensor.
      - lambda: |-
          float rotations_remaining;
          // Calculate how close to target
          rotations_remaining = id(target).state - x;
          if (rotations_remaining > 0.5){
            id(at_target).publish_state(false);
          }
          if (id(awning).current_operation == esphome::cover::COVER_OPERATION_OPENING){
            // when opening rotations_remaining moving +ve to zero
            if (rotations_remaining <= 0){
              id(at_target).publish_state(true);
            }
          }
          if (id(awning).current_operation == esphome::cover::COVER_OPERATION_CLOSING){
            // when closing rotations_remaining moving -ve to zero
            if (rotations_remaining >= 0){
              id(at_target).publish_state(true);
            }
          }
          return rotations_remaining;
      - or:
          - throttle: 300s # send a periodic update every 5 minutes
          - delta: 0.001    # send an update when there is a change

  # This sensor is the window position as needs to be reported back to home assistant
  # The sensor's value is a percentage, 0 => 100. HA cover needs 0 => 1.0
  # Do not use this value internally, its only for reporting back 
  # Internal position should come from id(encoder)
  - platform: copy
    name: Position
    id: reported_position
    source_id: encoder
    accuracy_decimals: 0
    entity_category: "diagnostic"
    disabled_by_default: false
    unit_of_measurement: "%"
    filters:
      # x is the encoder value from id(encoder)
      # This code only runs when the motor is running and the encoder
      # is updating.
      - lambda: |-
          int pos;
          pos = round(100*id(encoder).state/id(max_position).state);
          if (pos <= 1) { pos = 0;}
          if (pos >=99) { pos = 100;}
          return pos;
      - clamp:
          min_value: 0
          max_value: 100
      - or:
          - throttle: 300s # send a periodic update every 5 minutes
          - delta: 0.9     # send an update when there is a change
    on_value: 
      then:
        - lambda: |-
            id(awning).position = x/100;
            id(awning).publish_state();

  # Measure the speed of the motor
  # This runs at a fixed update_interval, and does not depend on encoder
  # rotation (and therefore updates)
  - platform: template
    name: "Speed"
    id: speed
    entity_category: "diagnostic"
    disabled_by_default: false
    lambda: |-
      static float encoder_value;
      static float last_value;
      static float speed;
      float rotations_remaining;
      float target_speed;
      float speed_error;
      float K;
      int new_pwm;

      // encoder is already in units of number of rotations, take the difference
      // between samples, divide by time interval and multiply by 60 for rpm
      encoder_value = id(encoder).state;
      speed = (float)(encoder_value - last_value) / 0.1 * 60;
      last_value = encoder_value;

      // Now control the motor PWM to reach target speed.
      // This loop runs at a known update interval and is better place
      // for this algorithm than the control loop
      // First calculate the target speed given the position and mode
      // This adapts PWM for varible load as the window winds and it
      // slows the window down near the target to we dont overshoot.
      if (id(motor_close).state || id(motor_open).state){
        rotations_remaining = id(control).state;
        if (abs(rotations_remaining) < 0.125){
          // 1/10 speed when very close to target
          target_speed = 2.0;
          K = 5;
        } else if (abs(rotations_remaining) < 0.5){
          // 1/4 speed as we approach target
          target_speed = 5.0;
          K = 2;
        } else {
          // default speed when some way from target
          if (id(quiet_mode).state){
            // Half speed is much quieter
            target_speed = 5.0;
            K = 1;
          } else {
            // Full speed
            target_speed = 10.0;
            K = 1;
          }
        }
        // speed_error is +ve if motor too slow, -ve if motor is too fast
        // Note that the proportional coefficient cant be too low otherwise
        // we will be adding zero and the PWM will not change.
        // i.e. K=1 => 1 rpm error will increase PWM by 1%
        // For this reason we adjust K at the same time as the target
        speed_error = target_speed - abs(speed);
        new_pwm = (int)(id(pwm).state + K * speed_error);
        if (new_pwm > 100) { new_pwm = 100;} // maximum clamp
        if (new_pwm < 10) { new_pwm = 10;};  // minimum clamp
        id(pwm).publish_state(new_pwm);
      }
      if (abs(speed) > 1){
        id(window_stuck).publish_state(false);
        id(check_lock).publish_state(false);
        id(closed_to_endstop).publish_state(false);
        id(opened_to_endstop).publish_state(false);
      }
      return speed;
    unit_of_measurement: 'rpm'
    accuracy_decimals: 1
    update_interval: 0.1s
    filters:
      # Average every 5 samples, effective update every 0.5s
      - sliding_window_moving_average:
          window_size: 5
          send_every: 5
      - or:
          - throttle: 300s # send a periodic update every 5 minutes
          - delta: 0.1     # send an update when there is a change

  # Boot counter helps to debug intermittent power supply issues
  # UI allows us to reset the counter and it should not increment
  # by itself. Doing so indicates supply is insufficient.
  - platform: template
    name: "Boot Counter"
    id: boot_counter
    entity_category: "diagnostic"
    lambda: return id(boot_count);
    update_interval: 1s
    filters:
      - or:
          - throttle: 300s # send a periodic update every 5 minutes
          - delta: 1.0     # send an update when there is a change

  # Target position is the position we want the window in, it is the
  # same units as the encoder (number of rotations). 0 represents fully
  # closed, and id(max_position) reprensents the number of rotations
  # to reach fully open.
  - platform: template
    name: "Target Position"
    id: target
    accuracy_decimals: 3
    unit_of_measurement: "rotations"
    entity_category: "diagnostic"

  # Set the PWM duty cycle though this diagnostic so we can monitor it
  - platform: template
    name: "PWM"
    id: pwm
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    disabled_by_default: True
    on_value: 
      then:
        - lambda: |-
            id(motor_en).set_level(x/100);

binary_sensor:
  # The motor controller has a FAULT output.
  # This can trigger due to over current in the motor, as would happen when it reaches
  # an endstop. It could also trigger if there is an under voltage fault, and this can
  # occur when starting the motor without soft-start. Large current inrush will dip
  # the supply, especially with some cheaper plug pack adapters. Unfortunately the
  # controller can not tell us what kind of fault it is.
  - platform: gpio
    pin:
      number: GPIO17
      mode:
        input: true
        pullup: true
      inverted: true
    id: fault
    entity_category: "diagnostic"
    name: "Fault"
    filters:
      # De-glitch the turn on and hold for 1s so it can be observed in UI
      - delayed_on: 2s   
      - delayed_off: 1s   
    on_press: 
      then:
        - lambda: |-
            fault_action();

  - platform: template
    name: Stall
    id: stall
    entity_category: diagnostic
    disabled_by_default: False
    lambda: |-
      return ((id(motor_close).state || id(motor_open).state) && !id(at_target).state && id(speed).state == 0);
    filters:
      - delayed_on : 800ms
    on_press: 
      then:
        # Since we have stalled, increase the PWM
        # The normal control sensor is not runnig when we are stalled and there are
        # no encoder updates. We just need to get the motor running again to get
        # that control loop activated again.
        - lambda: id(pwm).publish_state(95);

  - platform: analog_threshold
    name: Over Current
    sensor_id: motor_current
    entity_category: "diagnostic"
    threshold: 0.8
    filters:
      - delayed_on : 1s
    on_press: 
      then:
        - lambda: |-
            fault_action();

  - platform: template
    id: window_stuck
    name: "Window Stuck"
    device_class: problem

  - platform: template
    id: check_lock
    name: "Check Lock"
    device_class: problem

  - platform: template
    name: "Closed to endstop"
    id: closed_to_endstop
    entity_category: "diagnostic"

  - platform: template
    name: "Opened to endstop"
    id: opened_to_endstop
    entity_category: "diagnostic"

  - platform: template
    name: current limit
    id: current_limit
    device_class: problem

  # This at_target sensor is set to false when we set a new target position
  # It is set to true when the motor moves to the target position
  # Actions are then triggered
  - platform: template
    id: at_target
    name: "at target"
    disabled_by_default: true
    entity_category: diagnostic
    on_press: 
      then:
        - lambda: |-
            int pos;
            // Window has reached target position, stop the motor
            id(motor_open).turn_off();
            id(motor_close).turn_off();
            // Update the position and state of the cover
            id(awning).current_operation = esphome::cover::COVER_OPERATION_IDLE;
            pos = round(100*id(encoder).state/id(max_position).state);
            if (pos <= 1) { pos = 0;}
            if (pos >=99) { pos = 100;}
            id(awning).position = pos;
            id(awning).publish_state();

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
      entity_category: diagnostic
      disabled_by_default: true

# All the cover needs to do is process the action commands, set the target and
# start the motor. Once started with a target, the rest of the sensors will
# look after everything and stop the motor when target is reached.
cover:
  - platform: template
    name: "Awning"
    id: awning
    lambda: return {};
    open_action:
      - lambda: |-
          ESP_LOGI("awning", "Executing open_action, opened_to_endstop=%d", id(opened_to_endstop));
          // To open, set the target to the maximum position
          id(target).publish_state(id(max_position).state);
          id(at_target).publish_state(false);
          id(awning).current_operation = esphome::cover::COVER_OPERATION_OPENING;
          id(awning).publish_state();
          id(motor_open).turn_on();
          id(current_limit).publish_state(false);
    close_action:
      - lambda: |-
          ESP_LOGI("awning", "Executing close_action, closed_to_endstop=%d", id(closed_to_endstop));
          // To close, set the target to the minimum position, which is 0
          id(target).publish_state(0);
          id(at_target).publish_state(false);
          id(awning).current_operation = esphome::cover::COVER_OPERATION_CLOSING;
          id(awning).publish_state();
          id(motor_close).turn_on();
          id(current_limit).publish_state(false);
    stop_action:
      - lambda: |-
          ESP_LOGI("awning", "Executing stop_action");
          id(motor_close).turn_off();
          id(motor_open).turn_off();
          // When manually stopped the target position is where the window is
          id(target).publish_state(id(encoder).state);
          id(awning).current_operation = esphome::cover::COVER_OPERATION_IDLE;
          id(awning).publish_state();
          id(current_limit).publish_state(false);
    position_action:
      - lambda: |-
          // When asked to move to a position, we get a float 0->1, and multiply by max_position
          id(target).publish_state(pos*id(max_position).state);
          id(at_target).publish_state(false);
          if (id(encoder).state > id(target).state){
            ESP_LOGI("awning", "Executing position_action, closing from %d%% to %d%%", (int)(id(encoder).state, (int)(100 * pos)));
            id(awning).current_operation = esphome::cover::COVER_OPERATION_CLOSING;
            id(motor_close).turn_on();
          } else if (id(encoder).state < id(target).state){
            ESP_LOGI("awning", "Executing position_action, opening from %d%% to %d%%", (int)(id(encoder).state, (int)(100 * pos)));
            id(awning).current_operation = esphome::cover::COVER_OPERATION_OPENING;
            id(motor_open).turn_on();
          }
          id(awning).publish_state();
          id(current_limit).publish_state(false);
    has_position: True
          

